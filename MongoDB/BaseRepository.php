<?php
/**
 * Created by PhpStorm.
 * User: Андрей
 * Date: 22.10.2014
 * Time: 11:48
 */

namespace Brother\CommonBundle\MongoDB;


use Brother\CommonBundle\AppDebug;
use Doctrine\Common\Cache\ArrayCache;
use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\DocumentRepository;
use Doctrine\ODM\MongoDB\UnitOfWork;
use Doctrine\ODM\MongoDB\Mapping;

class BaseRepository extends DocumentRepository
{

    /**
     * @var \Doctrine\Common\Cache\MemcacheCache
     */
    protected $cache = null;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, Mapping\ClassMetadata $class)
    {
        parent::__construct($dm, $uow, $class); // TODO: Change the autogenerated stub
        $cache = $dm->getConfiguration()->getMetadataCacheImpl();
        $this->cache = $cache ?: new ArrayCache();
    }

    public function findById($id, $lifetime = 86400)
    {
        if ($id == null) {
            return null;
        }
        $object = $this->tryFetchFromCache($id, false);
        if (!$object || is_string($object)) {
            try {
                $object = $this->loadFromArray($this->getMongoCollection()->findOne(array('_id' => new \MongoId((string)$id))));
                $this->cache->save($this->generateCacheKey($id), $object, $lifetime);
            } catch (\MongoException $e) {
                return null;
            }
        }
        return is_numeric($object) && $object == -1 ? null : $object;
    }

    public function findBySlug($slug, $lifetime = 86400)
    {
        $object = $this->tryFetchFromCache($slug);
        if ($object == null || is_numeric($object) && $object == -1) {
            $collection = $this->getMongoCollection();
            $object = $this->loadFromArray($collection->findOne(array('slug' => $slug)));
            if ($object == null) {
                try {
                    $object = $this->findById($slug, $lifetime);
                } catch (\Exception $e) {
                    $object = null;
                }
            }
            if ($object && $slug != $object->getId()) {
                $this->cache->save($this->generateCacheKey($slug), $object->getId(), $lifetime);
            }
            return $object;
        } else {
            if (is_object($object)) {
                return $this->findById($object->getId());
            } else {
                return $this->findById($object);
            }
        }
    }

    public function findByIds($ids)
    {
        $r = array();
        foreach ($ids as $id) {
            if ($id && $entity = $this->findById($id)) {
                $r[] = $entity;
            }
        }
        return $r;
    }

    public function findByCache($query, $sort, $limit = 1000, $skip = 0, $options = array())
    {
        $key = isset($options['key']) ? $options['key'] . '_' .
            md5(serialize($query)) . '_' . md5(serialize($sort)) . '_' . $limit . '_' . $skip : null;
        $lifeTimeMain = isset($options['lifetime_main']) ? $options['lifetime_main'] : 3600;
        $lifeTimeDetails = isset($options['lifetime_details']) ? $options['lifetime_details'] : 86400;

        if (!$key) {
            $r = $this->getMongoCollection()
                ->find($query, array('_id'))
                ->sort($sort)->limit($limit)->skip($skip);
        } elseif (!$r = $this->tryFetchFromCache($key)) {
//            AppDebug::_dx($query, $key);
            $r = iterator_to_array(
                $this->getMongoCollection()
                    ->find($query, array('_id'))
                    ->sort($sort)->limit($limit)->skip($skip)
            );
            $this->cache->save($this->generateCacheKey($key), $r ? $r : -1, $lifeTimeMain);
        }
        if (is_numeric($r) && -1 == $r) {
            return array();
        }

        $result = array();
        foreach ($r as $row) {
            $result[] = $this->findById((string)$row['_id'], $lifeTimeDetails);
        }
        return $result;
    }

    /**
     * @param $id
     * @return bool|mixed|string
     */
    protected function tryFetchFromCache($id)
    {
        $t = memory_get_usage();
        if (!$object = $this->cache->fetch($this->generateCacheKey($id))) {
            return null;
        }
        $d = memory_get_usage() - $t;
        if ($d > 20000000) {
            if (is_object($object)) {
                AppDebug::_d(get_class($object), $d);
            } elseif (is_array($object)) {
                AppDebug::_dx(count($object), $d);
            } else {
                AppDebug::_dx($object, $d);
            }
        }
        return $object;
//        return $this->getDocumentManager()->merge($object);
    }

    /**
     * @param $id
     * @return string
     */
    public function generateCacheKey($id)
    {
        return substr($this->getDocumentName(), strrpos($this->getDocumentName(), '\\') + 1) . '_' . (string)$id . '3';
    }

    /**
     * @param $id
     * @param null $slug
     */
    public function clearCache($id)
    {
        $this->cache->delete($this->generateCacheKey($id));
    }

    /**
     * @param $r \MongoCursor|array
     */
    public function clearCursorCache($r)
    {
        if (isset($r['_id'])) {
            $this->clearCache((string)$r['_id']);
        } else {
            foreach ($r as $row) {
                $this->clearCache((string)$row['_id']);
            }
        }
    }

    /**
     * @return \Doctrine\MongoDB\Collection
     */
    public function getCollection()
    {
        return $this->getDocumentManager()->getDocumentCollection($this->getDocumentName());
    }

    /**
     * @return \MongoCollection
     */
    public function getMongoCollection()
    {
        return $this->getCollection()->getMongoCollection();
    }

    public function loadFromArray($row, $model = null, $fields = null)
    {
        if ($row == null) {
            return $model;
        }
        if ($model == null) {
            $class = $this->getClassName();
            $model = new $class();
        }
        foreach ($row as $name => $value) {
            if ($fields != null && array_search($name, $fields) === false) {
                continue;
            }
            if (is_object($value)) {
                switch (get_class($value)) {
                    case 'MongoId':
                        break;
                    case 'MongoDate':
                        /* @var $value \MongoDate */
                        $d = new \DateTime();
                        $d->setTimestamp($value->sec);
                        $value = $d;
                        break;
                    default:
                        AppDebug::_dx(get_class($value));
                        break;
                }
            }
            if (!is_array($value) || empty($value['$ref'])) {
                $setter = 'set' . implode('', array_map('ucfirst', explode('_', trim($name, '_'))));
                $model->$setter($value);
            }
        }
        return $model;
    }

    /**
     * @param $c \MongoCursor
     * @param null $fields
     * @return array
     */
    public function loadFromCursor($c, $fields = null)
    {
        $r = array();
        foreach ($c as $row) {
            $r[] = $this->loadFromArray($row, null, $fields);
        }
        return $r;
    }

    public function removeField($id, $field)
    {
        $this->getMongoCollection()->update(
            array('_id' => new \MongoId((string)$id)),
            array('$unset' => array($field => true))
        );
    }


} 